version: "3.7"

services:
  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
  dagster_db:
    image: postgres:11
    container_name: dagster_db
    environment:
      POSTGRES_USER: "dagster_pg_user"
      POSTGRES_PASSWORD: "dagster_pg_password"
      POSTGRES_DB: "dagster_pg_db"
    networks:
      - dagster_network

  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagster_webserver:
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
      args:
        PIP_PROXY: "$http_proxy" # If an http proxy is defined, pass it to pip
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: dagster_webserver
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_PG_USERNAME: "dagster_pg_user"
      DAGSTER_PG_PASSWORD: "dagster_pg_password"
      DAGSTER_PG_DB: "dagster_pg_db"
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - dagster_network
    depends_on:
      - dagster_db

  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagster_daemon:
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
      args:
        PIP_PROXY: "$http_proxy" # If an http proxy is defined, pass it to pip
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemon
    environment:
      DAGSTER_PG_USERNAME: "dagster_pg_user"
      DAGSTER_PG_PASSWORD: "dagster_pg_password"
      DAGSTER_PG_DB: "dagster_pg_db"
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - dagster_network
      - datalake_network
    depends_on:
      - dagster_db

# docker run -p 9000:9000 -p 9001:9001 minio/minio server /data --console-address ":9001"

  bronze_db:
    # Bronze database for ingestion
    image: minio/minio
    container_name: bronze_db
    environment:
      MINIO_ROOT_USER: bronze_db_admin
      MINIO_ROOT_PASSWORD: bronze_db_password
    expose:
      - 9000
      - 9001
    ports:
      - 9000:9000
      - 9001:9001
    networks:
      - datalake_network
    command:
      - server
      - /data
      - --console-address
      - :9001

  silver_db:
    # Bronze database for ingestion
    image: postgres:11
    container_name: silver_db
    environment:
      POSTGRES_USER: "silver_db_user"
      POSTGRES_PASSWORD: "silver_db_password"
      POSTGRES_DB: "silver_db"
    networks:
      - datalake_network
    expose:
      - "5433"
    ports:
      - "5433:5433"
    command: -p 5433
            
networks:
  dagster_network:
    driver: bridge
    name: dagster_network
  datalake_network:
    driver: bridge
    name: datalake_network