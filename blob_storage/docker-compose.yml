version: "3.7"

services:
  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
  dagster_db:
    image: postgres:11
    container_name: dagster_db
    environment:
      POSTGRES_USER: "dagster_pg_user"
      POSTGRES_PASSWORD: "dagster_pg_password"
      POSTGRES_DB: "dagster_pg_db"
    networks:
      - dagster_network

  # This service runs the gRPC server that loads your user code, in both dagster-webserver
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by the
  # webserver.
  dagster_user_code:
    build:
      context: .
      dockerfile: ./Dockerfile_user_code
      args:
        PIP_PROXY: "$http_proxy" # If an http proxy is defined, pass it to pip
    container_name: dagster_user_code
    image: docker_example_user_code_image
    environment:
      DAGSTER_PG_USERNAME: "dagster_pg_user"
      DAGSTER_PG_PASSWORD: "dagster_pg_password"
      DAGSTER_PG_DB: "dagster_pg_db"
      DAGSTER_CURRENT_IMAGE: "dagster_user_code"
      DAGSTER_GRPC_HOST: "0.0.0.0"
      DAGSTER_GRPC_PORT: "4000"
      DAGSTER_WORKING_DIRECTORY: $DAGSTER_HOME
      DAGSTER_MODULE_NAME: $DAGSTER_MODULE_NAME
      SILVER_DB_HOST: ${SILVER_DB_HOST}
      SILVER_DB_PORT: ${SILVER_DB_PORT}
      SILVER_DB_USER: ${SILVER_DB_USER}
      SILVER_DB_PASSWORD: ${SILVER_DB_PASSWORD}
      SILVER_DB_NAME: ${SILVER_DB_NAME}
    entrypoint:
      - dagster
      - api
      - grpc
    restart: always
    networks:
      - dagster_network
      - datalake_network

  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagster_webserver:
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
      args:
        PIP_PROXY: "$http_proxy" # If an http proxy is defined, pass it to pip
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: dagster_webserver
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_PG_USERNAME: "dagster_pg_user"
      DAGSTER_PG_PASSWORD: "dagster_pg_password"
      DAGSTER_PG_DB: "dagster_pg_db"
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - dagster_network
    depends_on:
      - dagster_db
      - dagster_user_code
      - bronze_db
      - silver_db

  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagster_daemon:
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
      args:
        PIP_PROXY: "$http_proxy" # If an http proxy is defined, pass it to pip
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemon
    environment:
      DAGSTER_PG_USERNAME: "dagster_pg_user"
      DAGSTER_PG_PASSWORD: "dagster_pg_password"
      DAGSTER_PG_DB: "dagster_pg_db"
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - dagster_network
      - datalake_network
    depends_on:
      - dagster_db
      - dagster_user_code

  bronze_db:
    # Bronze database for ingestion
    image: minio/minio
    container_name: bronze_db
    environment:
      MINIO_ROOT_USER: bronze_db_admin
      MINIO_ROOT_PASSWORD: bronze_db_password
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    expose:
      - 9000
      - 9001
    ports:
      - 9000:9000
      - 9001:9001
    networks:
      - datalake_network
    command:
      - server
      - /data
      - --console-address
      - :9001

  createbuckets:
    image: minio/mc
    depends_on:
      - bronze_db
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://bronze_db:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY};
      /usr/bin/mc mb minio/${MINIO_BUCKET_NAME};
      /usr/bin/mc policy set public minio/${MINIO_BUCKET_NAME};
      exit 0;
      "

  silver_db:
    # Silver database for transformed data
    image: postgres:11
    container_name: ${SILVER_DB_HOST}
    environment:
      POSTGRES_USER: ${SILVER_DB_USER}
      POSTGRES_PASSWORD: ${SILVER_DB_PASSWORD}
      POSTGRES_DB: ${SILVER_DB_NAME}
    networks:
      - datalake_network
    expose:
      - "${SILVER_DB_PORT}"
    ports:
      - "${SILVER_DB_PORT}:${SILVER_DB_PORT}"
    command: -p ${SILVER_DB_PORT}
            
networks:
  dagster_network:
    driver: bridge
    name: dagster_network
  datalake_network:
    driver: bridge
    name: datalake_network